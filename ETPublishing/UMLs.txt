@startuml
title Message Processing and Upload Workflow

participant ActiveMQListener
participant MessageProcessor
participant XMLParser
participant ProtobufProcessor
participant AzureUploader
participant DatabaseService

box "Tradefeedr Service" #LightBlue
    participant AzureBlobStorage
end box

ActiveMQListener -> MessageProcessor: listen(market Data from CPG.xml)
MessageProcessor -> XMLParser: parse(xmlMessage)
XMLParser -> MessageProcessor: return yourObject
MessageProcessor -> ProtobufProcessor: processToProtobuf(yourObject)
ProtobufProcessor -> MessageProcessor: return protobufData
MessageProcessor -> AzureUploader: uploadToAzure(protobufData, blobName)

alt successful upload
    AzureUploader -> AzureBlobStorage: upload(data, blobName) 
    note right: mTLS authentication
end

alt upload fails
    AzureUploader -> DatabaseService: saveFailedUpload(data, blobName)
end

loop retry mechanism
    AzureUploader -> DatabaseService: getFailedUploads()
    DatabaseService -> AzureUploader: return failedUploads
    AzureUploader -> AzureBlobStorage: upload(data, blobName)
    alt successful retry
        AzureUploader -> DatabaseService: deleteFailedUpload(id)
    end
end

@enduml

___________________________________________
Enrichment :
  @startuml
title API Request Workflow in LSEG Platform

actor Client
participant "RDP (Refinitiv Data Platform)" as RDP
participant "Enrichment Layer (Spring Boot)" as EnrichmentLayer
participant "Auth0 Tenant (Tradefeedr)" as Auth0Tenant
participant "Azure Key Vault" as AzureKeyVault
participant "Azure ConfigMap" as AzureConfigMap

box "Tradefeedr" #LightBlue
    participant TradefeedrAPI
end box

Client -> RDP: Initiates API Request \n (/tradefeedr/v1/algo-parent-order)
RDP -> EnrichmentLayer: Forwards API Request (includes UserId in header) \n https://app4.dev.rad.refinitiv.com/xxservice/v1/fx/algo/parent-orders

group Authentication
    EnrichmentLayer -> Auth0Tenant: POST /oauth/token (auth0_clientID, auth0_client_secret)
    Auth0Tenant --> EnrichmentLayer: Response (access_token, expires_in)
    EnrichmentLayer -> AzureKeyVault: Store access_token
    group Token Refresh
        EnrichmentLayer -> EnrichmentLayer: Check token expiry
        EnrichmentLayer -> Auth0Tenant: Refresh token 1 minute before expiry
        Auth0Tenant --> EnrichmentLayer: Response (new access_token, expires_in)
        EnrichmentLayer -> AzureKeyVault: Update access_token
    end
end

group Enrichment
    EnrichmentLayer -> AzureConfigMap: Get clientid for UserId
    AzureConfigMap --> EnrichmentLayer: Return clientid
    EnrichmentLayer -> AzureKeyVault: Retrieve unexpired token
    AzureKeyVault --> EnrichmentLayer: Return access_token
    EnrichmentLayer -> EnrichmentLayer: Enrich header with UserId, clientid, access_token
end

EnrichmentLayer -> TradefeedrAPI: Forward enriched request (over internet or private link) \n to https://api.tradefeedr.com/demo/v1/fx/algo/parent-orders.

@enduml
